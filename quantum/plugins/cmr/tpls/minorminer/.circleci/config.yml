version: 2
jobs:
  coverage-gcc:
    docker:
       - image: bellert/cmake:4
    working_directory: ~/repo
    steps:
      - checkout
      - run: &cpp-template
          name: run unittests
          command: |
            mkdir -p build;
            cd build;
            cmake .. -DMINORMINER_BUILD_TESTS=ON;
            make CC=$C_COMPILER CXX=$CXX_COMPILER;
            ./tests/run_tests;
          environment:
            C_COMPILER: gcc
            CXX_COMPILER: g++

  coverage-gcc-4.8:
    docker:
       - image: bellert/cmake:4
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          <<: *cpp-template
          environment:
            C_COMPILER: gcc-4.8
            CXX_COMPILER: g++-4.8

  coverage-clang:
    docker:
       - image: bellert/cmake:4
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          <<: *cpp-template
          environment:
            C_COMPILER: clang
            CXX_COMPILER: clang++

  coverage-osx:
    macos:
      xcode: "9.0"
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: install cmake
          command: |
            brew install cmake
      - run:
          <<: *cpp-template
          environment:
            C_COMPILER: gcc
            CXX_COMPILER: g++
      - run:
          <<: *cpp-template
          environment:
            C_COMPILER: clang
            CXX_COMPILER: clang++
      - run:
          name: coveralls
          command: |
            if [[ -n $COVERALLS_REPO_TOKEN ]];
            then python -m virtualenv env;
            . env/bin/activate;
            pip install cpp-coveralls;
            find build \( -name '*.gcno' -or -name '*.gcda' \) -exec mv {} . \;
            coveralls --exclude tests -E '.*gtest.*' --gcov-options '\-lp';
            fi;

  test-3.6: &full-test-template
    docker:
      - image: circleci/python:3.6-jessie

    working_directory: ~/repo

    steps:

      - checkout

      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run:
          name: create virtualenv
          command: |
            python -m virtualenv env

      - run: &install-dependencies-template
          name: install dependencies
          command: |
            . env/bin/activate
            python --version
            pip install -r tests/requirements.txt

      - save_cache:
          paths:
            - ./env
          key: v1-dependencies-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: &install-package-template
          name: install package
          command: |
            . env/bin/activate
            python setup.py build_ext --inplace

      - run: &run-tests-template
          name: run unittests
          command: |
            . env/bin/activate
            python --version
            python -m nose . --exe
          environment:
            CPPDEBUG: 1

      - run: &sdist-build-template
          name: build sdist
          command: |
            . env/bin/activate
            python setup.py sdist

      - store_artifacts:
          path: ./dist

      - run: &sdist-install-template
          name: install sdist without cython
          command: |
            python -m virtualenv env_sdist
            . env_sdist/bin/activate
            pip install dist/minorminer-*.tar.gz

      - run: &sdist-cython-install-template
          name: install sdist with cython
          command: |
            python -m virtualenv env_cython_sdist
            . env_cython_sdist/bin/activate
            pip install cython
            pip install dist/minorminer-*.tar.gz


  test-3.5:
    <<: *full-test-template
    docker:
      - image: circleci/python:3.5-jessie

  test-3.4:
    <<: *full-test-template
    docker:
      - image: circleci/python:3.4-jessie

  test-2.7:
    <<: *full-test-template
    docker:
      - image: circleci/python:2.7-jessie

  test-osx:
    macos:
      xcode: "9.0"

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: install pyenv
          command: |
            brew install pyenv

      - restore_cache:
          keys:
          - pyenv-versions-{{ .Environment.CIRCLE_JOB }}
          - dependencies2.7-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run:
          name: install python 2.7.14 and 3.6.5 with pyenv
          command: |
            pyenv install 2.7.14 -s
            pyenv install 3.6.5 -s

      - save_cache:
          paths:
            - ~/.pyenv
          key: pyenv-versions-{{ .Environment.CIRCLE_JOB }}

      - run:
          name: create virtualenv for 2.7.14
          command: |
            eval "$(pyenv init -)"
            pyenv local 2.7.14
            python -m pip install virtualenv
            python -m virtualenv env

      - run: *install-dependencies-template

      - save_cache:
          paths:
            - ./env
          key: dependencies2.7-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: *install-package-template

      - run: *run-tests-template

      - run: &clear-env-template
          name: clear virtual environment
          command: |
            rm -rf env

      - restore_cache:
          keys:
          - dependencies3.6-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run:
          name: create virtualenv for 3.6.5
          command: |
            eval "$(pyenv init -)"
            pyenv local 3.6.5
            python -m pip install virtualenv
            python -m virtualenv env

      - run: *install-dependencies-template

      - save_cache:
          paths:
            - ./env
          key: dependencies3.6-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: *install-package-template

      - run: *run-tests-template

      - run: *sdist-build-template

      - run: *sdist-install-template

      - run: *sdist-cython-install-template

  manylinux-64: &manylinux-template
    docker:
      - image: quay.io/pypa/manylinux1_x86_64

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: make dist directory
          command: |
            mkdir -p /home/circleci/dist

      - run:
          name: build wheels
          command: |
            for PYBIN in /opt/python/*/bin; do
              "${PYBIN}/pip" install -r tests/requirements.txt
              "${PYBIN}/pip" wheel . -w ./dist
              "${PYBIN}/python" setup.py sdist -d /home/circleci/dist
            done

      - run:
          name: bundle shared libraries into wheels
          command: |
            for whl in ./dist/minorminer*.whl; do
              auditwheel repair "$whl" -w /home/circleci/dist
            done

      - store_artifacts:
          path: /home/circleci/dist

      - save_cache:
          paths:
            - /home/circleci/dist
          key: dist-{{ .Environment.CIRCLE_JOB }}-{{ .Environment.CIRCLE_SHA1 }}

  manylinux-32:
    <<: *manylinux-template
    docker:
      - image: quay.io/pypa/manylinux1_i686

  build-osx:
    macos:
      xcode: "9.0"

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: install pyenv
          command: |
            brew install pyenv

      - restore_cache:
          keys:
          - pyenv-versions-{{ .Environment.CIRCLE_JOB }}

      - run:
          name: install python 2.7.14 and 3.6.5 with pyenv
          command: |
            pyenv install 2.7.14 -s
            pyenv install 3.5.5 -s
            pyenv install 3.6.5 -s

      - save_cache:
          paths:
            - ~/.pyenv
          key: pyenv-versions-{{ .Environment.CIRCLE_JOB }}

      - run:
          name: create virtualenv for 2.7.14
          command: |
            eval "$(pyenv init -)"
            pyenv local 2.7.14
            python -m pip install virtualenv
            python -m virtualenv env

      - run: *install-dependencies-template

      - run: &build-wheel-template
          name: build wheel
          command: |
            . env/bin/activate
            python setup.py build_ext --inplace
            python setup.py bdist_wheel
            python setup.py sdist

      - run: *clear-env-template

      - run:
          name: create virtualenv for 3.5.5
          command: |
            eval "$(pyenv init -)"
            pyenv local 3.5.5
            python -m pip install virtualenv
            python -m virtualenv env

      - run: *install-dependencies-template

      - run: *build-wheel-template

      - run: *clear-env-template

      - run:
          name: create virtualenv for 3.6.5
          command: |
            eval "$(pyenv init -)"
            pyenv local 3.6.5
            python -m pip install virtualenv
            python -m virtualenv env

      - run: *install-dependencies-template

      - run: *build-wheel-template

      - store_artifacts:
          path: ./dist

      - save_cache:
          paths:
            - ./dist
          key: dist-{{ .Environment.CIRCLE_JOB }}-{{ .Environment.CIRCLE_SHA1 }}


  pypi-deploy-linux:
    docker:
      - image: circleci/python:3.6-jessie

    working_directory: ~/repo

    steps:

      - restore_cache:
          keys:
            - dist-manylinux-64-{{ .Environment.CIRCLE_SHA1 }}

      - restore_cache:
          keys:
            - dist-manylinux-32-{{ .Environment.CIRCLE_SHA1 }}

      - run:
          name: create virtualenv
          command: |
            python -m virtualenv env

      - run: &install-twine-template
          name: install twine
          command: |
            . env/bin/activate
            pip install twine

      # this will fail if version does not match tag
      - run:
          name: install package from source
          command: |
            . env/bin/activate
            pip install /home/circleci/dist/minorminer-$CIRCLE_TAG.tar.gz

      - run: &init-pypirc-template
          name: init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = dwtools-ci" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc

      - run:
          name: upload
          command: |
            . env/bin/activate
            twine upload /home/circleci/dist/*

  pypi-deploy-osx:
    macos:
      xcode: "9.0"

    working_directory: ~/repo

    steps:

      - restore_cache:
          keys:
            - dist-build-osx-{{ .Environment.CIRCLE_SHA1 }}

      - run:
          name: install pyenv
          command: |
            brew install pyenv

      - restore_cache:
          keys:
          - pyenv-versions-build-osx

      - run:
          name: create virtualenv for 3.6.5
          command: |
            eval "$(pyenv init -)"
            pyenv local 3.6.5
            python -m pip install virtualenv
            python -m virtualenv env

      - run: *install-twine-template

      # this will fail if version does not match tag
      - run:
          name: install package from source
          command: |
            . env/bin/activate
            pip install ./dist/minorminer-$CIRCLE_TAG.tar.gz

      - run: *init-pypirc-template

      - run:
          name: upload
          command: |
            . env/bin/activate
            twine upload ./dist/*

workflows:
  version: 2
  test:
    jobs:
      - coverage-gcc
      - coverage-gcc-4.8
      - coverage-clang
      - coverage-osx:
          requires:
            - coverage-gcc
            - coverage-gcc-4.8
            - coverage-clang
      - test-3.6
      - test-2.7
      - test-3.5
      - test-3.4
      - test-osx:
          requires:
            - test-3.6
            - test-2.7
            - test-3.5
            - test-3.4
  deploy:
    jobs:
      - manylinux-64:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*(\.dev([0-9]+)?)?$/
            branches:
              only: /.*/
      - manylinux-32:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*(\.dev([0-9]+)?)?$/
            branches:
              only: /.*/
      - build-osx:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*(\.dev([0-9]+)?)?$/
            branches:
              only: /.*/
      - pypi-deploy-linux:
          requires:
            - manylinux-32
            - manylinux-64
            - build-osx
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*(\.dev([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - pypi-deploy-osx:
          requires:
            - manylinux-32
            - manylinux-64
            - build-osx
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*(\.dev([0-9]+)?)?$/
            branches:
              ignore: /.*/
